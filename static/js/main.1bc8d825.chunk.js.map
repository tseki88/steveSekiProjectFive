{"version":3,"sources":["Header.js","firebase.js","SessionHeader.js","sweetAlert.js","UserComponent.js","LoadingSpinner.js","ToolScoreTrack.js","ToolStopWatch.js","ToolTimer.js","ToolContainer.js","Main.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","SessionHeader","editEnable","setState","sessionNameEdit","state","editSessionName","e","sessionNameDbRef","database","ref","copySessionName","sessionName","target","value","set","on","response","updatedSessionName","val","this","className","aria-label","onClick","icon","faEdit","type","onChange","onKeyPress","key","faCheck","MySwal","withReactContent","Swal","alertTime","fire","title","confirmButtonColor","cancelButtonColor","confirmButtonText","alert","deleteFunction","text","showCancelButton","then","result","UserComponent","props","keyValue","userbaseData","length","removeUserObject","id","placeholder","handleUserNameChange","userbaseObjects","userName","userScore","map","scoreValue","i","name","handleCellValueChange","override","css","LoadingSpinner","sizeUnit","size","color","loading","ToolScoreTrack","addNewUserObject","userDbRef","newUserbaseObjectsArray","newUserObject","scoreType","push","scoreIndex","copyUserbaseObjectsArray","splice","updatedUserbaseObjectsArray","addNewScoreCategory","scoreDbRef","newScoreTypeSpreadArray","updatedUserbaseObject","forEach","userObject","copyUserScoreArray","removeScoreCategory","updatedScoreTypeSpreadArray","handleScoreTypeChange","parseInt","resetComponent","clearScore","index","array","newState","data","setTimeout","faPlus","faUserPlus","scoreTypeName","scoreTypeReferenceRow","reduce","a","b","ToolStopWatch","toggleTimer","running","resetTimer","time","format","tenMillisecondsValue","secondsValue","Math","floor","minutesValue","hoursValue","step","clearInterval","disabled","ToolTimer","setTimer","addTimerValue","updatedTime","startTimer","ToolContainer","Main","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1bc8d825.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass Header extends Component {\n    render() {\n        return (\n            <h1>Board Game Tool Kit</h1>\n        );\n    };\n};\n\nexport default Header;","import firebase from 'firebase/app';\nimport 'firebase/database';\n\n\n// ** Dear Potential Employer **\n// I am aware that it is not good practice to place the apiKey within public acess.\n// The Firebase Key is stored here solely for this project's purposes, as proof of concept on utilizing the firebase database integrated into this project.\n// The curriculum did not cover ways to 'hide/secure' this data, as it is not sensitive data.\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDc29x3tdKHxQURl3f9mZhQgKFFpkW_R5s\",\n    authDomain: \"juno-react-project.firebaseapp.com\",\n    databaseURL: \"https://juno-react-project.firebaseio.com\",\n    projectId: \"juno-react-project\",\n    storageBucket: \"juno-react-project.appspot.com\",\n    messagingSenderId: \"626440056280\",\n    appId: \"1:626440056280:web:07c8d249dbbff3e61196ad\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit, faCheck } from '@fortawesome/free-solid-svg-icons'\n\nclass SessionHeader extends Component {\n    constructor() {\n        super();\n        this.state = {\n            sessionName: \"\",\n            sessionNameEdit: false,\n        }\n    }\n\n    componentDidMount() {\n        const sessionNameDbRef = firebase.database().ref(\"sessionName\");\n\n        sessionNameDbRef.on(\"value\", (response) => {\n            const updatedSessionName = response.val()\n            this.setState({\n                sessionName: updatedSessionName\n            })\n        })\n    }\n\n    editEnable = () => {\n        this.setState({\n            sessionNameEdit: !this.state.sessionNameEdit\n        })\n    }\n\n    editSessionName = (e) => {\n        const sessionNameDbRef = firebase.database().ref(\"sessionName\");\n        let copySessionName = this.state.sessionName;\n        copySessionName = e.target.value;\n        sessionNameDbRef.set(copySessionName)\n    }\n\n    render() {\n        return (\n            <>\n                {this.state.sessionNameEdit === false\n                    ?\n                    <h3 className=\"sessionName relative\">{this.state.sessionName} <span className=\"icon editIcon\" aria-label=\"edit session name\" onClick={this.editEnable}><FontAwesomeIcon icon={faEdit} ></FontAwesomeIcon></span> </h3>\n                    :\n                    <div>\n                        <input className=\"sessionName\" type=\"text\" onChange={this.editSessionName} value={this.state.sessionName} onKeyPress={(e) => { if (e.key === 'Enter') { this.editEnable() } }} />\n                        <span className=\"sessionName icon checkIcon\" aria-label=\"confirm session name change\" onClick={this.editEnable}><FontAwesomeIcon icon={faCheck} /></span>\n                    </div>\n                }\n            </>\n        );\n    };\n};\n\nexport default SessionHeader;","import Swal from 'sweetalert2';\nimport withReactContent from 'sweetalert2-react-content';\n\nconst MySwal = withReactContent(Swal)\n\nconst alert = (deleteFunction) => MySwal.fire({\n    title: 'Are you sure?',\n    text: \"You won't be able to revert this!\",\n    icon: 'warning',\n    showCancelButton: true,\n    confirmButtonColor: '#2ec4b6',\n    cancelButtonColor: '#ff3366',\n    confirmButtonText: 'Yes'\n}).then((result) => {\n    if (result.value) {\n        Swal.fire(\n            'Deleted!',\n            'Deleted.',\n            'success'\n        );\n        deleteFunction();\n    }\n});\n\nconst alertTime = () => MySwal.fire({\n    title: 'Time is Up!!',\n    icon: 'warning',\n    confirmButtonColor: '#2ec4b6',\n    cancelButtonColor: '#ff3366',\n    confirmButtonText: 'Reset'\n});\n\nexport default alert;\nexport { alertTime };","import React, { Component } from 'react';\nimport alert from './sweetAlert';\n\nclass UserComponent extends Component {    \n    render() {\n        return( \n            <div className=\"userComponent relative\" key={this.props.keyValue}>\n                {\n                this.props.userbaseData.length !== 1\n                    &&\n                <button className=\"delete deleteUserObject\" aria-label=\"delete user column from scoreboard\" \n                onClick={() => {\n                    alert(() => this.props.removeUserObject(this.props.keyValue)) }\n                } \n                id={this.props.keyValue}\n                >x</button>\n                }\n                <input type=\"text\" placeholder=\"Enter User\" className=\"userName cell\" \n                onChange={(e) => this.props.handleUserNameChange(e)} \n                id={this.props.keyValue} value={this.props.userbaseObjects.userName} />\n                {this.props.userbaseObjects.userScore.map((scoreValue, i) => {\n                    return(\n                        <input type=\"number\" className=\"cell\" key={i} name={this.props.keyValue} id={i} onChange={(e) => this.props.handleCellValueChange(e)} value={scoreValue} />   \n                    )\n                }) }\n            </div>\n        );\n    };\n};\n\nexport default UserComponent;","import React, { Component }from 'react';\nimport { css } from '@emotion/core';\nimport { PacmanLoader } from 'react-spinners';\n\nconst override = css`\n    display: block;\n    margin: 100px auto;\n    transform: translateX(-80px);\n    border-color: red;\n`;\n\nclass LoadingSpinner extends Component {\n    render() {\n        return (\n            <div>\n                <PacmanLoader\n                    css={override}\n                    sizeUnit={\"px\"}\n                    size={80}\n                    color={'#ff3366'}\n                    loading={true}\n                />\n            </div>\n        )\n    }\n}\n\nexport default LoadingSpinner;","import React, { Component } from 'react';\nimport UserComponent from './UserComponent'\nimport firebase from './firebase';\nimport alert from './sweetAlert';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUserPlus, faPlus } from '@fortawesome/free-solid-svg-icons'\nimport LoadingSpinner from './LoadingSpinner';\n\nclass ToolScoreTrack extends Component {\n    constructor() {\n        super();\n        this.state = {\n            userbaseObjects: [],\n            scoreType: [\n                \"\"\n            ],\n            loading: true,\n        };\n    };\n\n    componentDidMount() {\n        const scoreDbRef = firebase.database().ref(\"scoreType\");\n\n        scoreDbRef.on(\"value\", (response) => {\n            const newState = [];\n            const data = response.val();\n            for (let key in data) {\n                newState.push(data[key]);\n            };\n\n            this.setState({\n                scoreType: newState\n            });\n        });\n\n        const userDbRef = firebase.database().ref(\"userbaseObjects\");\n\n        userDbRef.on((\"value\"), (response) => {\n            const newState = [];\n            const data = response.val();\n            for (let key in data) {\n                newState.push(data[key]);\n            };\n\n            this.setState({\n                userbaseObjects: newState\n            });\n        });\n\n        setTimeout(() => {\n            this.setState({\n                loading: false,\n            })\n        }, 2500);\n    };\n\n    addNewUserObject = () => {\n        const userDbRef = firebase.database().ref(\"userbaseObjects\");\n\n        const newUserbaseObjectsArray = [...this.state.userbaseObjects];\n        const newUserObject = {\n            userName: \"\",\n            userScore: []\n        };\n\n        for (let i = newUserObject.userScore.length; i < this.state.scoreType.length; i++) {\n            newUserObject.userScore.push(0);\n        };\n        newUserbaseObjectsArray.push(newUserObject);\n\n        userDbRef.set(newUserbaseObjectsArray);\n    };\n\n    removeUserObject = (scoreIndex) => {\n        const userDbRef = firebase.database().ref(\"userbaseObjects\");\n        const copyUserbaseObjectsArray = [...this.state.userbaseObjects];\n        copyUserbaseObjectsArray.splice(scoreIndex, 1);\n        \n        userDbRef.set(copyUserbaseObjectsArray);\n    };\n\n    handleUserNameChange = (e) => {\n        const userDbRef = firebase.database().ref(\"userbaseObjects\");\n        const updatedUserbaseObjectsArray = [...this.state.userbaseObjects];\n        updatedUserbaseObjectsArray[e.target.id].userName = e.target.value;\n        \n        userDbRef.set(updatedUserbaseObjectsArray);\n    };\n\n    handleCellValueChange = (e) => {\n        const userDbRef = firebase.database().ref(\"userbaseObjects\");\n        const updatedUserbaseObjectsArray = [...this.state.userbaseObjects];\n        updatedUserbaseObjectsArray[e.target.name].userScore[e.target.id] = e.target.value;\n\n        userDbRef.set(updatedUserbaseObjectsArray);\n    };\n\n    addNewScoreCategory = () => {\n        const scoreDbRef = firebase.database().ref(\"scoreType\");\n        // Adds new score category box\n        const newScoreTypeSpreadArray = [...this.state.scoreType];\n        newScoreTypeSpreadArray.push(\"\");\n        \n        scoreDbRef.set(newScoreTypeSpreadArray);\n\n        // Goes through each userObject's userscore array, and add a 0 at the end (for the new score category)\n        const userDbRef = firebase.database().ref(\"userbaseObjects\");\n        const updatedUserbaseObject = [...this.state.userbaseObjects];\n        updatedUserbaseObject.forEach((userObject) => {\n            const copyUserScoreArray = [...userObject.userScore];\n            copyUserScoreArray.push(0);\n            userObject.userScore = copyUserScoreArray;\n        });\n        // This will then rerender and add another box to each user component\n        userDbRef.set(updatedUserbaseObject);\n    };\n\n    removeScoreCategory = (scoreIndex) => {\n        const scoreDbRef = firebase.database().ref(\"scoreType\");\n        const updatedScoreTypeSpreadArray = [...this.state.scoreType];\n        updatedScoreTypeSpreadArray.splice(scoreIndex, 1);\n\n        scoreDbRef.set(updatedScoreTypeSpreadArray);\n\n        const userDbRef = firebase.database().ref(\"userbaseObjects\");\n        const updatedUserbaseObject = [...this.state.userbaseObjects];\n        updatedUserbaseObject.forEach((userObject) => {\n            userObject.userScore.splice(scoreIndex, 1);\n        });\n\n        userDbRef.set(updatedUserbaseObject);\n    };\n\n    handleScoreTypeChange = (e) => {\n        const scoreDbRef = firebase.database().ref(\"scoreType\");\n        const updatedScoreTypeSpreadArray = [...this.state.scoreType];\n        updatedScoreTypeSpreadArray[parseInt(e.target.id)] = e.target.value;\n        scoreDbRef.set(updatedScoreTypeSpreadArray);\n    };\n\n    resetComponent = () => {\n        const userDbRef = firebase.database().ref(\"userbaseObjects\");\n        const scoreDbRef = firebase.database().ref(\"scoreType\");\n\n        const resetUserObjects = [\n            {\n                userName: \"\",\n                userScore: [\n                    0,\n                ]\n            }\n        ];\n\n        userDbRef.set(resetUserObjects);\n        const resetScoreType = [\n            \"\",\n        ];\n\n        scoreDbRef.set(resetScoreType);\n    }\n\n    clearScore = () => {\n        const userDbRef = firebase.database().ref(\"userbaseObjects\");\n        const copyUserbaseObjectsArray = [...this.state.userbaseObjects];\n\n        copyUserbaseObjectsArray.forEach((userObject) => {\n            userObject.userScore.forEach((value, index, array) => {\n                array[index] = 0;\n            });\n        });\n\n        userDbRef.set(copyUserbaseObjectsArray);\n    };\n\n    render() {\n        if (this.state.loading) {\n            return (\n                <>\n                    <LoadingSpinner />\n                    <h3>Loading..</h3>\n                </>\n            )\n        }\n        return (\n            <div className=\"scoreContainer relative\">\n                <h3>Score Card</h3>\n                <button className=\"addScoreTypeIcon\" aria-label=\"add new score category to scoreboard\" onClick={this.addNewScoreCategory}>\n                    <FontAwesomeIcon icon={faPlus} />\n                </button>\n                <button className=\"addUserObjectIcon\" aria-label=\"add new user to scoreboard\" onClick={this.addNewUserObject}>\n                    <FontAwesomeIcon icon={faUserPlus} />\n                </button>\n                <div className=\"gridsContainer\">\n\n                    \n                    <div className=\"grid relative\">\n                        <div className=\"scoreTypeContainer\">\n                            <div className=\"cell emptyCell\"> \n                            </div>\n                            {this.state.scoreType.map((scoreTypeName, i) => {\n                                return(\n                                    <div className=\"relative\" key={i}>\n                                        {\n                                        this.state.scoreType.length !== 1\n                                            &&\n                                        <button className=\"delete deleteScoreType\" aria-label=\"delete score category row from scoreboard\" \n                                        onClick={() => {alert(() => this.removeScoreCategory(i))}} id={i}>x</button>\n                                        }\n                                        <input placeholder=\"Category Name\" type=\"text\" className=\"cell scoreType\" onChange={this.handleScoreTypeChange} value={scoreTypeName} id={i} />\n                                    </div>\n                                )\n                            }) }\n                        </div>\n                        {this.state.userbaseObjects.map((userObject, i) => {\n                            return(\n                            <UserComponent \n                                userbaseObjects={userObject}\n                                userbaseData={this.state.userbaseObjects}\n                                scoreTypeReferenceRow={i}\n                                keyValue={i}\n                                key={i}\n                                handleUserNameChange={this.handleUserNameChange}\n                                handleCellValueChange={this.handleCellValueChange}\n                                removeUserObject={this.removeUserObject}\n                            />\n                            )\n                        })}\n                    </div>\n                    <div className=\"sumRow grid\">\n                        <div className=\"cell\"><p>Total</p></div>\n                        {this.state.userbaseObjects.map((userObject, i) => {\n                            return(\n                            <div className=\"cell\" key={i}>\n                                <p>\n                                    {this.state.userbaseObjects[i].userScore.reduce((a,b) => parseInt(a) + parseInt(b), 0)}\n                                </p>\n                            </div>\n                            )\n                        })}\n                    </div>\n                </div>\n                <div className=\"scoreButtons\">\n                    <button onClick={() => { alert(() => this.resetComponent()) }}>Reset</button>\n                    <button onClick={() => { alert(() => this.clearScore()) }}>Clear</button>\n                </div>\n            </div>\n        );\n    };\n};\n\nexport default ToolScoreTrack;","import React, { Component } from 'react';\n\nclass ToolStopWatch extends Component {\n    constructor() {\n        super();\n        this.state = {\n            time: 0,\n            running: false,\n        }\n    }\n\n    toggleTimer = () => {\n        this.setState({\n            running: !this.state.running\n        })\n    }\n\n    resetTimer = () => {\n        this.setState({\n            time: 0\n        })\n    }\n\n    format = () => {\n        let tenMillisecondsValue = this.state.time % 100;\n        let secondsValue = Math.floor(this.state.time / 100) % 60;\n        let minutesValue = Math.floor(this.state.time / 6000) % 60;\n        let hoursValue = Math.floor(this.state.time / 360000) % 60;\n\n        return (\n            <>\n                {hoursValue < 10 ? \"0\" + hoursValue : hoursValue} : {minutesValue < 10 ? \"0\" + minutesValue : minutesValue} : {secondsValue < 10 ? \"0\" + secondsValue : secondsValue} : {tenMillisecondsValue < 10 ? \"0\" + tenMillisecondsValue : tenMillisecondsValue}\n            </>\n        )\n    }\n\n    step = () => {\n        this.setState({\n            time: this.state.time + 1\n        })\n    }\n    \n    render() {        \n        const interval = 10;\n        this.state.running ? setTimeout(this.step, interval) : clearInterval(this.step)\n        \n        return (\n            <div className=\"timerContainer\">\n                <h3>Stop Watch</h3>\n                <div>\n                    <p className=\"timeDisplay\">{this.format()}</p>\n                </div>\n                {this.state.running === false\n                    ?\n                <button onClick={this.toggleTimer}>Start</button>\n                    :\n                <button onClick={this.toggleTimer}>Pause</button>\n                }\n                <button onClick={this.resetTimer} disabled={this.state.running}>Reset</button>\n            </div>\n        );\n    };\n};\n\nexport default ToolStopWatch;","import React, { Component } from 'react';\nimport {alertTime} from './sweetAlert';\n\nclass ToolTimer extends Component {\n    constructor() {\n        super();\n        this.state = {\n            time: 0,\n            running: false,\n            setTimer: true,\n        }\n    }\n\n    toggleTimer = () => {\n        this.setState({\n            running: !this.state.running\n        })\n    }\n\n    resetTimer = () => {\n        this.setState({\n            time: 0,\n            setTimer: true,\n        })\n    }\n\n    format = () => {\n        let tenMillisecondsValue = this.state.time % 100;\n        let secondsValue = Math.floor(this.state.time / 100) % 60;\n        let minutesValue = Math.floor(this.state.time / 6000) % 60;\n        let hoursValue = Math.floor(this.state.time / 360000) % 60;\n\n        return (\n            <>\n                {hoursValue < 10 ? \"0\" + hoursValue : hoursValue} : {minutesValue < 10 ? \"0\" + minutesValue : minutesValue} : {secondsValue < 10 ? \"0\" + secondsValue : secondsValue} : {tenMillisecondsValue < 10 ? \"0\" + tenMillisecondsValue : tenMillisecondsValue}\n            </>\n        )\n    }\n\n    step = () => {\n        if (this.state.time === 1) {\n            this.setState({\n                running: false,\n                setTimer: true,\n            })\n            alertTime();\n        }\n\n\n        this.setState({\n            time: this.state.time - 1\n        })\n    }\n\n    addTimerValue = (value) => {\n        let updatedTime = this.state.time + value\n        this.setState({\n            time: updatedTime\n        })\n    }\n\n    startTimer = () => {\n        this.setState({\n            setTimer: false,\n            running: true,\n        })\n    }\n\n    render() {\n        const interval = 10;\n        this.state.running ? setTimeout(this.step, interval) : clearInterval(this.step)\n\n        return (\n            <div className=\"timerContainer\">\n                <h3>Timer</h3>\n                <div>\n                    <p className=\"timeDisplay\">{this.format()}</p>\n                    <div className=\"buttonFlex\">\n                        <button disabled={this.state.running} onClick={() => this.addTimerValue(1000)}>+ 10 sec.</button>\n                        <button disabled={this.state.running} onClick={() => this.addTimerValue(3000)}>+ 30 sec.</button>\n                        <button disabled={this.state.running} onClick={() => this.addTimerValue(6000)}>+ 1 min.</button>\n                        <button disabled={this.state.running} onClick={() => this.addTimerValue(30000)}>+ 5 min.</button>\n                        <button disabled={this.state.running} onClick={() => this.addTimerValue(180000)}>+ 30 min.</button>\n                        <button disabled={this.state.running} onClick={() => this.addTimerValue(360000)}>+ 1 hr</button>\n                    </div>\n                    {this.state.running === false\n                        ?\n                        <button disabled={this.state.time === 0 && true} onClick={this.toggleTimer}>Start</button>\n                        :\n                        <button onClick={this.toggleTimer}>Pause</button>\n                    }\n                    <button onClick={this.resetTimer} disabled={this.state.running}>Reset</button>\n                </div>\n            </div>\n        );\n    };\n};\n\nexport default ToolTimer;","import React, { Component } from 'react';\nimport SessionHeader from './SessionHeader';\nimport ToolScoreTrack from './ToolScoreTrack';\nimport ToolStopWatch from './ToolStopWatch';\nimport ToolTimer from './ToolTimer';\n\nclass ToolContainer extends Component {\n    render() {\n        return (\n            <div className=\"flex\">\n                <div className=\"toolContainer\">\n                    <SessionHeader />\n                    <ToolScoreTrack />\n                </div>\n                <div className=\"toolContainer halfContainer\">\n                    <ToolStopWatch />\n                </div>\n                <div className=\"toolContainer halfContainer\">\n                    <ToolTimer />\n                </div>\n            </div>\n        );\n    };\n};\n\nexport default ToolContainer;","import React, { Component } from 'react';\nimport ToolContainer from './ToolContainer';\n\nclass Main extends Component {\n    render() {\n        return (\n            <div>\n                <ToolContainer />\n            </div>\n        );\n    };\n};\n\nexport default Main;","import React, { Component } from 'react';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer>\n                Created by Steve Seki\n            </footer>\n        );\n    };\n};\n\nexport default Footer;","import React, { Component } from 'react';\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <Header />\n        <Main />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}