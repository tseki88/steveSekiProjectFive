{"version":3,"sources":["Header.js","firebase.js","SessionHeader.js","sweetAlert.js","UserComponent.js","ToolScoreTrack.js","ToolStopWatch.js","ToolTimer.js","ToolContainer.js","Main.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","SessionHeader","editEnable","setState","sessionNameEdit","state","editSessionName","e","sessionNameDbRef","database","ref","copySessionName","sessionName","target","value","set","on","response","updatedSessionName","val","this","className","onClick","icon","faEdit","type","onChange","onKeyPress","key","faCheck","MySwal","withReactContent","Swal","alertTime","fire","title","confirmButtonColor","cancelButtonColor","confirmButtonText","alert","deleteFunction","text","showCancelButton","then","result","UserComponent","props","keyValue","userbaseData","length","removeUserObject","id","placeholder","handleUserNameChange","userbaseObjects","userName","userScore","map","scoreValue","i","name","handleCellValueChange","ToolScoreTrack","addNewUserObject","userDbRef","newUserbaseObjectsArray","newUserObject","scoreType","push","scoreIndex","copyUserbaseObjectsArray","splice","updatedUserbaseObjectsArray","addNewScoreCategory","scoreDbRef","newScoreTypeSpreadArray","updatedUserbaseObject","forEach","userObject","copyUserScoreArray","removeScoreCategory","updatedScoreTypeSpreadArray","handleScoreTypeChange","parseInt","resetComponent","clearScore","index","array","newState","data","scoreTypeName","faPlus","scoreTypeReferenceRow","faUserPlus","reduce","a","b","ToolStopWatch","toggleTimer","running","resetTimer","time","format","tenMillisecondsValue","secondsValue","Math","floor","minutesValue","hoursValue","step","setTimeout","clearInterval","disabled","ToolTimer","setTimer","addTimerValue","updatedTime","startTimer","ToolContainer","Main","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8SAWeA,G,uLANP,OACI,+C,GAHSC,c,uBCerBC,IAASC,cAVc,CACnBC,OAAQ,0CACRC,WAAY,qCACZC,YAAa,4CACbC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,eACnBC,MAAO,8CAKIR,QAAf,E,cCmCeS,E,YAjDX,aAAe,IAAD,8BACV,+CAkBJC,WAAa,WACT,EAAKC,SAAS,CACVC,iBAAkB,EAAKC,MAAMD,mBArBvB,EAyBdE,gBAAkB,SAACC,GACf,IAAMC,EAAmBhB,EAASiB,WAAWC,IAAI,eAC7CC,EAAkB,EAAKN,MAAMO,YACjCD,EAAkBJ,EAAEM,OAAOC,MAC3BN,EAAiBO,IAAIJ,IA3BrB,EAAKN,MAAQ,CACTO,YAAa,GACbR,iBAAiB,GAJX,E,iFAQO,IAAD,OACSZ,EAASiB,WAAWC,IAAI,eAEhCM,GAAG,SAAS,SAACC,GAC1B,IAAMC,EAAqBD,EAASE,MACpC,EAAKhB,SAAS,CACVS,YAAaM,S,+BAkBf,IAAD,OACL,OACI,qCACoC,IAA/BE,KAAKf,MAAMD,gBAER,wBAAIiB,UAAU,eAAeD,KAAKf,MAAMO,YAAxC,IAAqD,0BAAMS,UAAU,gBAAgBC,QAASF,KAAKlB,YAAY,kBAAC,IAAD,CAAiBqB,KAAMC,OAAtI,KAEA,6BACI,2BAAOH,UAAU,cAAcI,KAAK,OAAOC,SAAUN,KAAKd,gBAAiBQ,MAAOM,KAAKf,MAAMO,YAAae,WAAY,SAACpB,GAAsB,UAAVA,EAAEqB,KAAmB,EAAK1B,gBAC7J,0BAAMmB,UAAU,6BAA6BC,QAASF,KAAKlB,YAAY,kBAAC,IAAD,CAAiBqB,KAAMM,a,GA1C1FtC,a,gCCFtBuC,E,MAASC,GAAiBC,KAqB1BC,EAAY,kBAAMH,EAAOI,KAAK,CAChCC,MAAO,eACPZ,KAAM,UACNa,mBAAoB,UACpBC,kBAAmB,UACnBC,kBAAmB,WAGRC,EA3BD,SAACC,GAAD,OAAoBV,EAAOI,KAAK,CAC1CC,MAAO,gBACPM,KAAM,oCACNlB,KAAM,UACNmB,kBAAkB,EAClBN,mBAAoB,UACpBC,kBAAmB,UACnBC,kBAAmB,oBACpBK,MAAK,SAACC,GACDA,EAAO9B,QACPkB,IAAKE,KACD,WACA,8BACA,WAEJM,SCUOK,E,iLA1BD,IAAD,OACL,OACI,yBAAKxB,UAAU,yBAAyBO,IAAKR,KAAK0B,MAAMC,UAEjB,IAAnC3B,KAAK0B,MAAME,aAAaC,QAExB,4BAAQ5B,UAAU,0BAClBC,QAAS,WACLiB,GAAM,kBAAM,EAAKO,MAAMI,iBAAiB,EAAKJ,MAAMC,cAEvDI,GAAI/B,KAAK0B,MAAMC,UAJf,KAOA,2BAAOtB,KAAK,OAAO2B,YAAY,aAAa/B,UAAU,gBACtDK,SAAU,SAACnB,GAAD,OAAO,EAAKuC,MAAMO,qBAAqB9C,IACjD4C,GAAI/B,KAAK0B,MAAMC,SAAUjC,MAAOM,KAAK0B,MAAMQ,gBAAgBC,WAC1DnC,KAAK0B,MAAMQ,gBAAgBE,UAAUC,KAAI,SAACC,EAAYC,GACnD,OACI,2BAAOlC,KAAK,SAASJ,UAAU,OAAOO,IAAK+B,EAAGC,KAAM,EAAKd,MAAMC,SAAUI,GAAIQ,EAAGjC,SAAU,SAACnB,GAAD,OAAO,EAAKuC,MAAMe,sBAAsBtD,IAAIO,MAAO4C,Y,GAnBzInE,aCkObuE,E,YA7NX,aAAe,IAAD,8BACV,+CAuCJC,iBAAmB,WASf,IARA,IAAMC,EAAYxE,EAASiB,WAAWC,IAAI,mBAEpCuD,EAAuB,YAAO,EAAK5D,MAAMiD,iBACzCY,EAAgB,CAClBX,SAAU,GACVC,UAAW,IAGNG,EAAIO,EAAcV,UAAUP,OAAQU,EAAI,EAAKtD,MAAM8D,UAAUlB,OAAQU,IAC1EO,EAAcV,UAAUY,KAAK,GAEjCH,EAAwBG,KAAKF,GAE7BF,EAAUjD,IAAIkD,IAtDJ,EAyDdf,iBAAmB,SAACmB,GAChB,IAAML,EAAYxE,EAASiB,WAAWC,IAAI,mBACpC4D,EAAwB,YAAO,EAAKjE,MAAMiD,iBAChDgB,EAAyBC,OAAOF,EAAY,GAE5CL,EAAUjD,IAAIuD,IA9DJ,EAiEdjB,qBAAuB,SAAC9C,GACpB,IAAMyD,EAAYxE,EAASiB,WAAWC,IAAI,mBACpC8D,EAA2B,YAAO,EAAKnE,MAAMiD,iBACnDkB,EAA4BjE,EAAEM,OAAOsC,IAAII,SAAWhD,EAAEM,OAAOC,MAE7DkD,EAAUjD,IAAIyD,IAtEJ,EAyEdX,sBAAwB,SAACtD,GACrB,IAAMyD,EAAYxE,EAASiB,WAAWC,IAAI,mBACpC8D,EAA2B,YAAO,EAAKnE,MAAMiD,iBACnDkB,EAA4BjE,EAAEM,OAAO+C,MAAMJ,UAAUjD,EAAEM,OAAOsC,IAAM5C,EAAEM,OAAOC,MAE7EkD,EAAUjD,IAAIyD,IA9EJ,EAiFdC,oBAAsB,WAClB,IAAMC,EAAalF,EAASiB,WAAWC,IAAI,aAErCiE,EAAuB,YAAO,EAAKtE,MAAM8D,WAC/CQ,EAAwBP,KAAK,IAE7BM,EAAW3D,IAAI4D,GAGf,IAAMX,EAAYxE,EAASiB,WAAWC,IAAI,mBACpCkE,EAAqB,YAAO,EAAKvE,MAAMiD,iBAC7CsB,EAAsBC,SAAQ,SAACC,GAC3B,IAAMC,EAAkB,YAAOD,EAAWtB,WAC1CuB,EAAmBX,KAAK,GACxBU,EAAWtB,UAAYuB,KAG3Bf,EAAUjD,IAAI6D,IAlGJ,EAqGdI,oBAAsB,SAACX,GACnB,IAAMK,EAAalF,EAASiB,WAAWC,IAAI,aACrCuE,EAA2B,YAAO,EAAK5E,MAAM8D,WACnDc,EAA4BV,OAAOF,EAAY,GAE/CK,EAAW3D,IAAIkE,GAEf,IAAMjB,EAAYxE,EAASiB,WAAWC,IAAI,mBACpCkE,EAAqB,YAAO,EAAKvE,MAAMiD,iBAC7CsB,EAAsBC,SAAQ,SAACC,GAC3BA,EAAWtB,UAAUe,OAAOF,EAAY,MAG5CL,EAAUjD,IAAI6D,IAlHJ,EAqHdM,sBAAwB,SAAC3E,GACrB,IAAMmE,EAAalF,EAASiB,WAAWC,IAAI,aACrCuE,EAA2B,YAAO,EAAK5E,MAAM8D,WACnDc,EAA4BE,SAAS5E,EAAEM,OAAOsC,KAAO5C,EAAEM,OAAOC,MAC9D4D,EAAW3D,IAAIkE,IAzHL,EA4HdG,eAAiB,WACb,IAAMpB,EAAYxE,EAASiB,WAAWC,IAAI,mBACpCgE,EAAalF,EAASiB,WAAWC,IAAI,aAW3CsD,EAAUjD,IATe,CACrB,CACIwC,SAAU,GACVC,UAAW,CACP,MAUZkB,EAAW3D,IAJY,CACnB,MA3IM,EAiJdsE,WAAa,WACT,IAAMrB,EAAYxE,EAASiB,WAAWC,IAAI,mBACpC4D,EAAwB,YAAO,EAAKjE,MAAMiD,iBAEhDgB,EAAyBO,SAAQ,SAACC,GAC9BA,EAAWtB,UAAUqB,SAAQ,SAAC/D,EAAOwE,EAAOC,GACxCA,EAAMD,GAAS,QAIvBtB,EAAUjD,IAAIuD,IAzJd,EAAKjE,MAAQ,CACTiD,gBAAiB,GACjBa,UAAW,CACP,KALE,E,iFAUO,IAAD,OACG3E,EAASiB,WAAWC,IAAI,aAEhCM,GAAG,SAAS,SAACC,GACpB,IAAMuE,EAAW,GACXC,EAAOxE,EAASE,MACtB,IAAK,IAAIS,KAAO6D,EACZD,EAASpB,KAAKqB,EAAK7D,IAGvB,EAAKzB,SAAS,CACVgE,UAAWqB,OAIDhG,EAASiB,WAAWC,IAAI,mBAEhCM,GAAI,SAAU,SAACC,GACrB,IAAMuE,EAAW,GACXC,EAAOxE,EAASE,MACtB,IAAK,IAAIS,KAAO6D,EACZD,EAASpB,KAAKqB,EAAK7D,IAGvB,EAAKzB,SAAS,CACVmD,gBAAiBkC,S,+BA2HnB,IAAD,OACL,OACI,yBAAKnE,UAAU,kBACX,0CACA,yBAAKA,UAAU,iBACX,6BACI,yBAAKA,UAAU,QACX,4BAAQC,QAAS,WAAOiB,GAAM,kBAAM,EAAK6C,sBAAzC,SACA,4BAAQ9D,QAAS,WAAOiB,GAAM,kBAAM,EAAK8C,kBAAzC,UAEHjE,KAAKf,MAAM8D,UAAUV,KAAI,SAACiC,EAAe/B,GACtC,OACI,yBAAKtC,UAAU,WAAWO,IAAK+B,GAEK,IAAhC,EAAKtD,MAAM8D,UAAUlB,QAErB,4BAAQ5B,UAAU,yBAClBC,QAAS,WAAOiB,GAAM,kBAAM,EAAKyC,oBAAoBrB,OAAMR,GAAIQ,GAD/D,KAGA,2BAAOP,YAAY,gBAAgB3B,KAAK,OAAOJ,UAAU,iBAAiBK,SAAU,EAAKwD,sBAAuBpE,MAAO4E,EAAevC,GAAIQ,SAK1J,4BAAQtC,UAAU,mBAAmBC,QAASF,KAAKqD,qBAC/C,kBAAC,IAAD,CAAiBlD,KAAMoE,OAE1BvE,KAAKf,MAAMiD,gBAAgBG,KAAI,SAACqB,EAAYnB,GACzC,OACA,kBAAC,EAAD,CACIL,gBAAiBwB,EACjB9B,aAAc,EAAK3C,MAAMiD,gBACzBsC,sBAAuBjC,EACvBZ,SAAUY,EACV/B,IAAK+B,EACLN,qBAAsB,EAAKA,qBAC3BQ,sBAAuB,EAAKA,sBAC5BX,iBAAkB,EAAKA,sBAI/B,4BAAQ7B,UAAU,oBAAoBC,QAASF,KAAK2C,kBAChD,kBAAC,IAAD,CAAiBxC,KAAMsE,QAG/B,yBAAKxE,UAAU,eACX,yBAAKA,UAAU,QAAO,qCACrBD,KAAKf,MAAMiD,gBAAgBG,KAAI,SAACqB,EAAYnB,GACzC,OACA,yBAAKtC,UAAU,OAAOO,IAAK+B,GACvB,2BACK,EAAKtD,MAAMiD,gBAAgBK,GAAGH,UAAUsC,QAAO,SAACC,EAAEC,GAAH,OAASb,SAASY,GAAKZ,SAASa,KAAI,c,GAlNvFzG,aCuDd0G,E,YA3DX,aAAe,IAAD,8BACV,+CAOJC,YAAc,WACV,EAAK/F,SAAS,CACVgG,SAAU,EAAK9F,MAAM8F,WAVf,EAcdC,WAAa,WACT,EAAKjG,SAAS,CACVkG,KAAM,KAhBA,EAoBdC,OAAS,WACL,IAAIC,EAAuB,EAAKlG,MAAMgG,KAAO,IACzCG,EAAeC,KAAKC,MAAM,EAAKrG,MAAMgG,KAAO,KAAO,GACnDM,EAAeF,KAAKC,MAAM,EAAKrG,MAAMgG,KAAO,KAAQ,GACpDO,EAAaH,KAAKC,MAAM,EAAKrG,MAAMgG,KAAO,MAAU,GAExD,OACI,oCACKO,EAAa,GAAK,IAAMA,EAAaA,EAD1C,MACyDD,EAAe,GAAK,IAAMA,EAAeA,EADlG,MACmHH,EAAe,GAAK,IAAMA,EAAeA,EAD5J,MAC6KD,EAAuB,GAAK,IAAMA,EAAuBA,IA5BhO,EAiCdM,KAAO,WACH,EAAK1G,SAAS,CACVkG,KAAM,EAAKhG,MAAMgG,KAAO,KAjC5B,EAAKhG,MAAQ,CACTgG,KAAM,EACNF,SAAS,GAJH,E,sEAuCJ,IAAD,OAIL,OAFA/E,KAAKf,MAAM8F,QAAUW,WAAW1F,KAAKyF,KADpB,IACsCE,cAAc3F,KAAKyF,MAGtE,yBAAKxF,UAAU,kBACX,0CACA,uBAAGA,UAAU,eAAeD,KAAKkF,WACT,IAAvBlF,KAAKf,MAAM8F,QAEZ,4BAAQ7E,QAASF,KAAK8E,YAAavE,WAAY,SAACpB,GAAqB,MAAVA,EAAEqB,KAAa,EAAKsE,gBAA/E,SAEA,4BAAQ5E,QAASF,KAAK8E,YAAavE,WAAY,SAACpB,GAAsB,MAAVA,EAAEqB,KAAe,EAAKsE,gBAAlF,SAEA,4BAAQ5E,QAASF,KAAKgF,WAAYY,SAAU5F,KAAKf,MAAM8F,SAAvD,c,GAtDY5G,aCsGb0H,E,YApGX,aAAe,IAAD,8BACV,+CAQJf,YAAc,WACV,EAAK/F,SAAS,CACVgG,SAAU,EAAK9F,MAAM8F,WAXf,EAedC,WAAa,WACT,EAAKjG,SAAS,CACVkG,KAAM,EACNa,UAAU,KAlBJ,EAsBdZ,OAAS,WACL,IAAIC,EAAuB,EAAKlG,MAAMgG,KAAO,IACzCG,EAAeC,KAAKC,MAAM,EAAKrG,MAAMgG,KAAO,KAAO,GACnDM,EAAeF,KAAKC,MAAM,EAAKrG,MAAMgG,KAAO,KAAQ,GACpDO,EAAaH,KAAKC,MAAM,EAAKrG,MAAMgG,KAAO,MAAU,GAExD,OACI,oCACKO,EAAa,GAAK,IAAMA,EAAaA,EAD1C,MACyDD,EAAe,GAAK,IAAMA,EAAeA,EADlG,MACmHH,EAAe,GAAK,IAAMA,EAAeA,EAD5J,MAC6KD,EAAuB,GAAK,IAAMA,EAAuBA,IA9BhO,EAmCdM,KAAO,WACqB,IAApB,EAAKxG,MAAMgG,OACX,EAAKlG,SAAS,CACVgG,SAAS,EACTe,UAAU,IAEdjF,KAIJ,EAAK9B,SAAS,CACVkG,KAAM,EAAKhG,MAAMgG,KAAO,KA9ClB,EAkDdc,cAAgB,SAACrG,GACb,IAAIsG,EAAc,EAAK/G,MAAMgG,KAAOvF,EACpC,EAAKX,SAAS,CACVkG,KAAMe,KArDA,EAyDdC,WAAa,WACT,EAAKlH,SAAS,CACV+G,UAAU,EACVf,SAAS,KA1Db,EAAK9F,MAAQ,CACTgG,KAAM,EACNF,SAAS,EACTe,UAAU,GALJ,E,sEAgEJ,IAAD,OAIL,OAFA9F,KAAKf,MAAM8F,QAAUW,WAAW1F,KAAKyF,KADpB,IACsCE,cAAc3F,KAAKyF,MAGtE,yBAAKxF,UAAU,kBACX,qCAGA,6BACI,uBAAGA,UAAU,eAAeD,KAAKkF,UACjC,yBAAKjF,UAAU,cACX,4BAAQ2F,SAAU5F,KAAKf,MAAM8F,QAAS7E,QAAS,kBAAM,EAAK6F,cAAc,OAAxE,gBACA,4BAAQH,SAAU5F,KAAKf,MAAM8F,QAAS7E,QAAS,kBAAM,EAAK6F,cAAc,OAAxE,gBACA,4BAAQH,SAAU5F,KAAKf,MAAM8F,QAAS7E,QAAS,kBAAM,EAAK6F,cAAc,OAAxE,cACA,4BAAQH,SAAU5F,KAAKf,MAAM8F,QAAS7E,QAAS,kBAAM,EAAK6F,cAAc,OAAxE,eACA,4BAAQH,SAAU5F,KAAKf,MAAM8F,QAAS7E,QAAS,kBAAM,EAAK6F,cAAc,QAAxE,gBACA,4BAAQH,SAAU5F,KAAKf,MAAM8F,QAAS7E,QAAS,kBAAM,EAAK6F,cAAc,QAAxE,cAEoB,IAAvB/F,KAAKf,MAAM8F,QAER,4BAAQa,SAA8B,IAApB5F,KAAKf,MAAMgG,OAAc,EAAM/E,QAASF,KAAK8E,aAA/D,SAEA,4BAAQ5E,QAASF,KAAK8E,aAAtB,SAEJ,4BAAQ5E,QAASF,KAAKgF,WAAYY,SAAU5F,KAAKf,MAAM8F,SAAvD,e,GA1FI5G,aCsBT+H,E,iLAjBP,OACI,yBAAKjG,UAAU,QACX,yBAAKA,UAAU,iBACX,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,+BACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,+BACX,kBAAC,EAAD,Y,GAZQ9B,aCObgI,E,iLARP,OACI,6BACI,kBAAC,EAAD,W,GAJGhI,aCSJiI,E,iLARP,OACI,6D,GAHSjI,aCgBNkI,E,iLAVX,OACE,yBAAKpG,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANU9B,aCMEmI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1F,MAAK,SAAA2F,GACjCA,EAAaC,kB","file":"static/js/main.f186f0e4.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass Header extends Component {\n    render() {\n        return (\n            <h1>Placeholder</h1>\n        );\n    };\n};\n\nexport default Header;","import firebase from 'firebase/app';\nimport 'firebase/database';\n\n\n// ** Dear Potential Employer **\n// I am aware that it is not good practice to place the apiKey within public acess.\n// The Firebase Key is stored here solely for this project's purposes, as proof of concept on utilizing the firebase database integrated into this project.\n// The curriculum did not cover ways to 'hide/secure' this data, as it is not sensitive data.\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDc29x3tdKHxQURl3f9mZhQgKFFpkW_R5s\",\n    authDomain: \"juno-react-project.firebaseapp.com\",\n    databaseURL: \"https://juno-react-project.firebaseio.com\",\n    projectId: \"juno-react-project\",\n    storageBucket: \"juno-react-project.appspot.com\",\n    messagingSenderId: \"626440056280\",\n    appId: \"1:626440056280:web:07c8d249dbbff3e61196ad\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit, faCheck } from '@fortawesome/free-solid-svg-icons'\n\nclass SessionHeader extends Component {\n    constructor() {\n        super();\n        this.state = {\n            sessionName: \"\",\n            sessionNameEdit: false,\n        }\n    }\n\n    componentDidMount() {\n        const sessionNameDbRef = firebase.database().ref(\"sessionName\");\n\n        sessionNameDbRef.on(\"value\", (response) => {\n            const updatedSessionName = response.val()\n            this.setState({\n                sessionName: updatedSessionName\n            })\n        })\n    }\n\n    editEnable = () => {\n        this.setState({\n            sessionNameEdit: !this.state.sessionNameEdit\n        })\n    }\n\n    editSessionName = (e) => {\n        const sessionNameDbRef = firebase.database().ref(\"sessionName\");\n        let copySessionName = this.state.sessionName;\n        copySessionName = e.target.value;\n        sessionNameDbRef.set(copySessionName)\n    }\n\n    render() {\n        return (\n            <>\n                {this.state.sessionNameEdit === false\n                    ?\n                    <h3 className=\"sessionName\">{this.state.sessionName} <span className=\"icon editIcon\" onClick={this.editEnable}><FontAwesomeIcon icon={faEdit}></FontAwesomeIcon></span> </h3>\n                    :\n                    <div>\n                        <input className=\"sessionName\" type=\"text\" onChange={this.editSessionName} value={this.state.sessionName} onKeyPress={(e) => { if (e.key === 'Enter') { this.editEnable() } }} />\n                        <span className=\"sessionName icon checkIcon\" onClick={this.editEnable}><FontAwesomeIcon icon={faCheck} /></span>\n                    </div>\n                }\n            </>\n        );\n    };\n};\n\nexport default SessionHeader;","import Swal from 'sweetalert2';\nimport withReactContent from 'sweetalert2-react-content';\n\nconst MySwal = withReactContent(Swal)\n\nconst alert = (deleteFunction) => MySwal.fire({\n    title: 'Are you sure?',\n    text: \"You won't be able to revert this!\",\n    icon: 'warning',\n    showCancelButton: true,\n    confirmButtonColor: '#2ec4b6',\n    cancelButtonColor: '#ff3366',\n    confirmButtonText: 'Yes, delete it!'\n}).then((result) => {\n    if (result.value) {\n        Swal.fire(\n            'Deleted!',\n            'Your file has been deleted.',\n            'success'\n        );\n        deleteFunction();\n    }\n});\n\nconst alertTime = () => MySwal.fire({\n    title: 'Time is Up!!',\n    icon: 'warning',\n    confirmButtonColor: '#2ec4b6',\n    cancelButtonColor: '#ff3366',\n    confirmButtonText: 'Reset'\n});\n\nexport default alert;\nexport { alertTime };","import React, { Component } from 'react';\nimport alert from './sweetAlert';\n\nclass UserComponent extends Component {    \n    render() {\n        return( \n            <div className=\"userComponent relative\" key={this.props.keyValue}>\n                {\n                this.props.userbaseData.length !== 1\n                    &&\n                <button className=\"delete deleteUserObject\" \n                onClick={() => {\n                    alert(() => this.props.removeUserObject(this.props.keyValue)) }\n                } \n                id={this.props.keyValue}\n                >x</button>\n                }\n                <input type=\"text\" placeholder=\"Enter User\" className=\"userName cell\" \n                onChange={(e) => this.props.handleUserNameChange(e)} \n                id={this.props.keyValue} value={this.props.userbaseObjects.userName} />\n                {this.props.userbaseObjects.userScore.map((scoreValue, i) => {\n                    return(\n                        <input type=\"number\" className=\"cell\" key={i} name={this.props.keyValue} id={i} onChange={(e) => this.props.handleCellValueChange(e)} value={scoreValue} />   \n                    )\n                }) }\n            </div>\n        );\n    };\n};\n\nexport default UserComponent;","import React, { Component } from 'react';\nimport UserComponent from './UserComponent'\nimport firebase from './firebase';\nimport alert from './sweetAlert';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUserPlus, faPlus } from '@fortawesome/free-solid-svg-icons'\n\nclass ToolScoreTrack extends Component {\n    constructor() {\n        super();\n        this.state = {\n            userbaseObjects: [],\n            scoreType: [\n                \"\"\n            ],\n        };\n    };\n\n    componentDidMount() {\n        const scoreDbRef = firebase.database().ref(\"scoreType\");\n\n        scoreDbRef.on(\"value\", (response) => {\n            const newState = [];\n            const data = response.val();\n            for (let key in data) {\n                newState.push(data[key]);\n            };\n\n            this.setState({\n                scoreType: newState\n            });\n        });\n\n        const userDbRef = firebase.database().ref(\"userbaseObjects\");\n\n        userDbRef.on((\"value\"), (response) => {\n            const newState = [];\n            const data = response.val();\n            for (let key in data) {\n                newState.push(data[key]);\n            };\n\n            this.setState({\n                userbaseObjects: newState\n            });\n        });\n    };\n\n    addNewUserObject = () => {\n        const userDbRef = firebase.database().ref(\"userbaseObjects\");\n\n        const newUserbaseObjectsArray = [...this.state.userbaseObjects];\n        const newUserObject = {\n            userName: \"\",\n            userScore: []\n        };\n\n        for (let i = newUserObject.userScore.length; i < this.state.scoreType.length; i++) {\n            newUserObject.userScore.push(0);\n        };\n        newUserbaseObjectsArray.push(newUserObject);\n\n        userDbRef.set(newUserbaseObjectsArray);\n    };\n\n    removeUserObject = (scoreIndex) => {\n        const userDbRef = firebase.database().ref(\"userbaseObjects\");\n        const copyUserbaseObjectsArray = [...this.state.userbaseObjects];\n        copyUserbaseObjectsArray.splice(scoreIndex, 1);\n        \n        userDbRef.set(copyUserbaseObjectsArray);\n    };\n\n    handleUserNameChange = (e) => {\n        const userDbRef = firebase.database().ref(\"userbaseObjects\");\n        const updatedUserbaseObjectsArray = [...this.state.userbaseObjects];\n        updatedUserbaseObjectsArray[e.target.id].userName = e.target.value;\n        \n        userDbRef.set(updatedUserbaseObjectsArray);\n    };\n\n    handleCellValueChange = (e) => {\n        const userDbRef = firebase.database().ref(\"userbaseObjects\");\n        const updatedUserbaseObjectsArray = [...this.state.userbaseObjects];\n        updatedUserbaseObjectsArray[e.target.name].userScore[e.target.id] = e.target.value;\n\n        userDbRef.set(updatedUserbaseObjectsArray);\n    };\n\n    addNewScoreCategory = () => {\n        const scoreDbRef = firebase.database().ref(\"scoreType\");\n        // Adds new score category box\n        const newScoreTypeSpreadArray = [...this.state.scoreType];\n        newScoreTypeSpreadArray.push(\"\");\n        \n        scoreDbRef.set(newScoreTypeSpreadArray);\n\n        // Goes through each userObject's userscore array, and add a 0 at the end (for the new score category)\n        const userDbRef = firebase.database().ref(\"userbaseObjects\");\n        const updatedUserbaseObject = [...this.state.userbaseObjects];\n        updatedUserbaseObject.forEach((userObject) => {\n            const copyUserScoreArray = [...userObject.userScore];\n            copyUserScoreArray.push(0);\n            userObject.userScore = copyUserScoreArray;\n        });\n        // This will then rerender and add another box to each user component\n        userDbRef.set(updatedUserbaseObject);\n    };\n\n    removeScoreCategory = (scoreIndex) => {\n        const scoreDbRef = firebase.database().ref(\"scoreType\");\n        const updatedScoreTypeSpreadArray = [...this.state.scoreType];\n        updatedScoreTypeSpreadArray.splice(scoreIndex, 1);\n\n        scoreDbRef.set(updatedScoreTypeSpreadArray);\n\n        const userDbRef = firebase.database().ref(\"userbaseObjects\");\n        const updatedUserbaseObject = [...this.state.userbaseObjects];\n        updatedUserbaseObject.forEach((userObject) => {\n            userObject.userScore.splice(scoreIndex, 1);\n        });\n\n        userDbRef.set(updatedUserbaseObject);\n    };\n\n    handleScoreTypeChange = (e) => {\n        const scoreDbRef = firebase.database().ref(\"scoreType\");\n        const updatedScoreTypeSpreadArray = [...this.state.scoreType];\n        updatedScoreTypeSpreadArray[parseInt(e.target.id)] = e.target.value;\n        scoreDbRef.set(updatedScoreTypeSpreadArray);\n    };\n\n    resetComponent = () => {\n        const userDbRef = firebase.database().ref(\"userbaseObjects\");\n        const scoreDbRef = firebase.database().ref(\"scoreType\");\n\n        const resetUserObjects = [\n            {\n                userName: \"\",\n                userScore: [\n                    0,\n                ]\n            }\n        ];\n\n        userDbRef.set(resetUserObjects);\n        const resetScoreType = [\n            \"\",\n        ];\n\n        scoreDbRef.set(resetScoreType);\n    }\n\n    clearScore = () => {\n        const userDbRef = firebase.database().ref(\"userbaseObjects\");\n        const copyUserbaseObjectsArray = [...this.state.userbaseObjects];\n\n        copyUserbaseObjectsArray.forEach((userObject) => {\n            userObject.userScore.forEach((value, index, array) => {\n                array[index] = 0;\n            });\n        });\n\n        userDbRef.set(copyUserbaseObjectsArray);\n    };\n\n    render() {\n        return (\n            <div className=\"scoreContainer\">\n                <h3>Score Card</h3>\n                <div className=\"grid relative\">\n                    <div>\n                        <div className=\"cell\"> \n                            <button onClick={() => {alert(() => this.resetComponent())}}>Reset</button>\n                            <button onClick={() => {alert(() => this.clearScore())}}>Clear</button>\n                        </div>\n                        {this.state.scoreType.map((scoreTypeName, i) => {\n                            return(\n                                <div className=\"relative\" key={i}>\n                                    {\n                                    this.state.scoreType.length !== 1\n                                        &&\n                                    <button className=\"delete deleteScoreType\" \n                                    onClick={() => {alert(() => this.removeScoreCategory(i))}} id={i}>x</button>\n                                    }\n                                    <input placeholder=\"Category Name\" type=\"text\" className=\"cell scoreType\" onChange={this.handleScoreTypeChange} value={scoreTypeName} id={i} />\n                                </div>\n                            )\n                        }) }\n                    </div>\n                    <button className=\"addScoreTypeIcon\" onClick={this.addNewScoreCategory}>\n                        <FontAwesomeIcon icon={faPlus} />\n                    </button>\n                    {this.state.userbaseObjects.map((userObject, i) => {\n                        return(\n                        <UserComponent \n                            userbaseObjects={userObject}\n                            userbaseData={this.state.userbaseObjects}\n                            scoreTypeReferenceRow={i}\n                            keyValue={i}\n                            key={i}\n                            handleUserNameChange={this.handleUserNameChange}\n                            handleCellValueChange={this.handleCellValueChange}\n                            removeUserObject={this.removeUserObject}\n                        />\n                        )\n                    })}\n                    <button className=\"addUserObjectIcon\" onClick={this.addNewUserObject}>\n                        <FontAwesomeIcon icon={faUserPlus} />\n                    </button>\n                </div>\n                <div className=\"sumRow grid\">\n                    <div className=\"cell\"><p>Total</p></div>\n                    {this.state.userbaseObjects.map((userObject, i) => {\n                        return(\n                        <div className=\"cell\" key={i}>\n                            <p>\n                                {this.state.userbaseObjects[i].userScore.reduce((a,b) => parseInt(a) + parseInt(b), 0)}\n                            </p>\n                        </div>\n                        )\n                    })}\n                </div>\n\n            </div>\n        );\n    };\n};\n\nexport default ToolScoreTrack;","import React, { Component } from 'react';\n\nclass ToolStopWatch extends Component {\n    constructor() {\n        super();\n        this.state = {\n            time: 0,\n            running: false,\n        }\n    }\n\n    toggleTimer = () => {\n        this.setState({\n            running: !this.state.running\n        })\n    }\n\n    resetTimer = () => {\n        this.setState({\n            time: 0\n        })\n    }\n\n    format = () => {\n        let tenMillisecondsValue = this.state.time % 100;\n        let secondsValue = Math.floor(this.state.time / 100) % 60;\n        let minutesValue = Math.floor(this.state.time / 6000) % 60;\n        let hoursValue = Math.floor(this.state.time / 360000) % 60;\n\n        return (\n            <>\n                {hoursValue < 10 ? \"0\" + hoursValue : hoursValue} : {minutesValue < 10 ? \"0\" + minutesValue : minutesValue} : {secondsValue < 10 ? \"0\" + secondsValue : secondsValue} : {tenMillisecondsValue < 10 ? \"0\" + tenMillisecondsValue : tenMillisecondsValue}\n            </>\n        )\n    }\n\n    step = () => {\n        this.setState({\n            time: this.state.time + 1\n        })\n    }\n    \n    render() {        \n        const interval = 10;\n        this.state.running ? setTimeout(this.step, interval) : clearInterval(this.step)\n        \n        return (\n            <div className=\"timerContainer\">\n                <h3>Stop Watch</h3>\n                <p className=\"timeDisplay\">{this.format()}</p>\n                {this.state.running === false\n                    ?\n                <button onClick={this.toggleTimer} onKeyPress={(e) => {if (e.key === ' '){this.toggleTimer()}}}>Start</button>\n                    :\n                <button onClick={this.toggleTimer} onKeyPress={(e) => { if (e.key === ' ') { this.toggleTimer() } }}>Pause</button>\n                }\n                <button onClick={this.resetTimer} disabled={this.state.running}>Reset</button>\n            </div>\n        );\n    };\n};\n\nexport default ToolStopWatch;","import React, { Component } from 'react';\nimport {alertTime} from './sweetAlert';\n\nclass ToolTimer extends Component {\n    constructor() {\n        super();\n        this.state = {\n            time: 0,\n            running: false,\n            setTimer: true,\n        }\n    }\n\n    toggleTimer = () => {\n        this.setState({\n            running: !this.state.running\n        })\n    }\n\n    resetTimer = () => {\n        this.setState({\n            time: 0,\n            setTimer: true,\n        })\n    }\n\n    format = () => {\n        let tenMillisecondsValue = this.state.time % 100;\n        let secondsValue = Math.floor(this.state.time / 100) % 60;\n        let minutesValue = Math.floor(this.state.time / 6000) % 60;\n        let hoursValue = Math.floor(this.state.time / 360000) % 60;\n\n        return (\n            <>\n                {hoursValue < 10 ? \"0\" + hoursValue : hoursValue} : {minutesValue < 10 ? \"0\" + minutesValue : minutesValue} : {secondsValue < 10 ? \"0\" + secondsValue : secondsValue} : {tenMillisecondsValue < 10 ? \"0\" + tenMillisecondsValue : tenMillisecondsValue}\n            </>\n        )\n    }\n\n    step = () => {\n        if (this.state.time === 1) {\n            this.setState({\n                running: false,\n                setTimer: true,\n            })\n            alertTime();\n        }\n\n\n        this.setState({\n            time: this.state.time - 1\n        })\n    }\n\n    addTimerValue = (value) => {\n        let updatedTime = this.state.time + value\n        this.setState({\n            time: updatedTime\n        })\n    }\n\n    startTimer = () => {\n        this.setState({\n            setTimer: false,\n            running: true,\n        })\n    }\n\n    render() {\n        const interval = 10;\n        this.state.running ? setTimeout(this.step, interval) : clearInterval(this.step)\n\n        return (\n            <div className=\"timerContainer\">\n                <h3>Timer</h3>\n                {/* {this.state.setTimer === true\n                    ? */}\n                <div>\n                    <p className=\"timeDisplay\">{this.format()}</p>\n                    <div className=\"buttonFlex\">\n                        <button disabled={this.state.running} onClick={() => this.addTimerValue(1000)}>+ 10 Seconds</button>\n                        <button disabled={this.state.running} onClick={() => this.addTimerValue(3000)}>+ 30 Seconds</button>\n                        <button disabled={this.state.running} onClick={() => this.addTimerValue(6000)}>+ 1 Minute</button>\n                        <button disabled={this.state.running} onClick={() => this.addTimerValue(30000)}>+ 5 Minutes</button>\n                        <button disabled={this.state.running} onClick={() => this.addTimerValue(180000)}>+ 30 Minutes</button>\n                        <button disabled={this.state.running} onClick={() => this.addTimerValue(360000)}>+ 1 Hour</button>\n                    </div>\n                    {this.state.running === false\n                        ?\n                        <button disabled={this.state.time === 0 && true} onClick={this.toggleTimer}>Start</button>\n                        :\n                        <button onClick={this.toggleTimer}>Pause</button>\n                    }\n                    <button onClick={this.resetTimer} disabled={this.state.running}>Reset</button>\n                </div>\n                    {/* :\n                <div>\n                    <p className=\"timeDisplay\">{this.format()}</p> */}\n                {/* </div> */}\n            </div>\n        );\n    };\n};\n\nexport default ToolTimer;","import React, { Component } from 'react';\nimport SessionHeader from './SessionHeader';\nimport ToolScoreTrack from './ToolScoreTrack';\nimport ToolStopWatch from './ToolStopWatch';\nimport ToolTimer from './ToolTimer';\n\nclass ToolContainer extends Component {\n    render() {\n        return (\n            <div className=\"flex\">\n                <div className=\"toolContainer\">\n                    <SessionHeader />\n                    <ToolScoreTrack />\n                </div>\n                <div className=\"toolContainer halfContainer\">\n                    <ToolStopWatch />\n                </div>\n                <div className=\"toolContainer halfContainer\">\n                    <ToolTimer />\n                </div>\n            </div>\n        );\n    };\n};\n\nexport default ToolContainer;","import React, { Component } from 'react';\nimport ToolContainer from './ToolContainer';\n\nclass Main extends Component {\n    render() {\n        return (\n            <div>\n                <ToolContainer />\n            </div>\n        );\n    };\n};\n\nexport default Main;","import React, { Component } from 'react';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer>\n                Created by Steve Seki\n            </footer>\n        );\n    };\n};\n\nexport default Footer;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <Header />\n        <Main />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}